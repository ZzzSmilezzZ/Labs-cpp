/*
 * Лабораторная работа №10
 *
 * Темы:
 *     классы (наследование, полиморфизм)
 *
 * ----------------------------------- Формулировка задания: -----------------------------------
 * Описать иерархию классов матриц произвольного размера со статическим выделением памяти под элементы.
 *
 * ------- Базовый класс матрицы MatrixBase -------
 * Для класса матрицы MatrixBase:
 *  - Конструктор по умолчанию удалить
 *  - Определить protected конструктор MatrixBase(unsigned int iSize), задающий размер матрицы
 *  - Определить приватное поле const unsigned int m_size, в котором хранится размерность матрицы
 *  - Метод unsigned int size() const возвращающий размерность матрицы
 *  - Абстрактный метод int element(unsigned int i, unsigned int j) const возвращающий элемент матрицы
 *  - Абстрактный метод int& element(unsigned int i, unsigned int j) возвращающий ссылку на элемент матрицы
 *  - перегрузить void operator*=(int iMult) умножения всех элементов матрицы на величину iMult
 *  - перегрузить void operator+=(MatrixBase iAdd) сложения матрицы с матрицей iAdd
 *  - перегрузить отдельно стоящий (не являющийся часть класса MatrixBase) оператор вывода
 *     содержимого матрицы в консоль std::ofstream& operator<<(std::ofstream& stream, const MatrixBase& iMatrix)
 *     объявление оператора разместить в заголовочном файле MatrixBase.h, определение -- в MatrixBase.cpp
 *
 * ------- Класс двухмерной матрицы Matrix2D -------
 * Определить класс двухмерной матрицы Matrix2D, являющийся public наследником класса MatrixBase.
 *
 * ------- Класс двухмерной матрицы Matrix3D -------
 * Определить класс трехмерной матрицы Matrix3D, являющийся public наследником класса MatrixBase.
 *
 * ------- Основная программа -------
 * Определить два экзмепляра Matrix2D и два экзмепляра Matrix3D.
 * Заполнить их упорядоченными значениями (1, 2, 3, ...)
 * Произвести с ними операции сложения и умножения, определёнными в соответствующих операторах класса MatrixBase.
 * Исходные данные и результаты вычислений вывести в консоль в человекочитаемом виде используя определённый по ТЗ
 * оператор вывода содержимого матрицы в виде такой конструкции: std::out << matrix << std::endl;
 *
*/